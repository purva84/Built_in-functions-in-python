1. **`append(x)`**
   - Adds an item `x` to the end of the list.
   - Example: `[1, 2, 3].append(4)` → `[1, 2, 3, 4]`

# Program to demonstrate the use of append() method

fruits = ['apple', 'banana', 'cherry']
print("Original list:", fruits)
fruits.append('orange')
print("List after append:", fruits)

*************************************************************************************************************************************************
2. **`extend(iterable)`**
   - Extends the list by appending elements from the iterable.
   - Example: `[1, 2].extend([3, 4])` → `[1, 2, 3, 4]`

# Program to demonstrate the use of extend() method
numbers = [1, 2, 3]
print("Original list:", numbers)
numbers.extend([4, 5, 6])
print("List after extend:", numbers)

*************************************************************************************************************************************************

3. **`insert(i, x)`**
   - Inserts an item `x` at a given position `i`.
   - Example: `[1, 3].insert(1, 2)` → `[1, 2, 3]`

# Program to demonstrate the use of insert() method
colors = ['red', 'blue', 'green']
print("Original list:", colors)
colors.insert(1, 'yellow')
print("List after insert:", colors)

*************************************************************************************************************************************************

4. **`remove(x)`**
   - Removes the first item from the list whose value is equal to `x`.
   - Example: `[1, 2, 3].remove(2)` → `[1, 3]`

# Program to demonstrate the use of remove() method
animals = ['dog', 'cat', 'bird', 'cat']
print("Original list:", animals)
animals.remove('cat')
print("List after remove:", animals)

*************************************************************************************************************************************************

5. **`pop([i])`**
   - Removes and returns the item at the given position `i` in the list. If no index is specified, it removes and returns the last item in the list.
   - Example: `[1, 2, 3].pop()` → `3`

# Program to demonstrate the use of pop() method
numbers = [10, 20, 30, 40]
print("Original list:", numbers)
last_item = numbers.pop()
print("Removed item:", last_item)
print("List after pop:", numbers)

item_at_index_1 = numbers.pop(1)
print("Removed item at index 1:", item_at_index_1)
print("List after pop at index 1:", numbers)

*************************************************************************************************************************************************

6. **`clear()`**
   - Removes all items from the list.
   - Example: `[1, 2, 3].clear()` → `[]`

lis = [1, 2, 3]
lis.clear()
print(lis)

*************************************************************************************************************************************************

7. **`index(x[, start[, end]])`**
   - Returns the index of the first item whose value is equal to `x`. Raises a `ValueError` if the value is not present.
   - Example: `[1, 2, 3].index(2)` → `1`

Animals= ["cat", "dog", "tiger"]
print(Animals.index("dog"))

*************************************************************************************************************************************************
8. **`count(x)`**
   - Returns the number of times `x` appears in the list.
   - Example: `[1, 2, 2, 3].count(2)` → `2`
#create a list
fruits = ["Apple", "Mango", "Banana", "Cherry" , "Papaya"]
# printing count using count() function
print(fruits.count("Apple"))

*************************************************************************************************************************************************

9. **`sort(key=None, reverse=False)`**
   - Sorts the items of the list in place (the arguments can be used for sort customization).
   - Example: `[3, 1, 2].sort()` → `[1, 2, 3]`

# Program to demonstrate the use of sort() method
numbers = [5, 3, 9, 1]
print("Original list:", numbers)

# Sorting the list
numbers.sort()
print("List after sort:", numbers)

*************************************************************************************************************************************************

10. **`reverse()`**
    - Reverses the elements of the list in place.
    - Example: `[1, 2, 3].reverse()` → `[3, 2, 1]`

# Program to demonstrate the use of reverse() method
letters = ['a', 'b', 'c', 'd']
print("Original list:", letters)

# Reversing the list
letters.reverse()
print("List after reverse:", letters)

*************************************************************************************************************************************************

11. **`copy()`**
    - Returns a shallow copy of the list.
    - Example: `[1, 2, 3].copy()` → `[1, 2, 3]`

# Program to demonstrate the use of copy() method
original_list = [1, 2, 3, 4]
print("Original list:", original_list)

# Creating a copy of the list
copied_list = original_list.copy()
print("Copied list:", copied_list)

# Modifying the copied list
copied_list.append(5)
print("Modified copied list:", copied_list)
print("Original list after modifying copied list:", original_list)

*************************************************************************************************************************************************
 12. Python list max() function returns the maximum value present in the list.

#creating a list
num = [2,3,6,1,8,4,9,0]
#printing max element
print(max(num))

*************************************************************************************************************************************************
13.Python min() function returns the smallest of the values or the smallest item in an iterable passed as its parameter.

numbers = [23,25,65,21,98]
print(min(numbers))

************************************************************************************************************************************************

# Initialize a list
my_list = [1, 2, 3]

# append(x)
my_list.append(4)  # [1, 2, 3, 4]

# extend(iterable)
my_list.extend([5, 6])  # [1, 2, 3, 4, 5, 6]

# insert(i, x)
my_list.insert(1, 10)  # [1, 10, 2, 3, 4, 5, 6]

# remove(x)
my_list.remove(10)  # [1, 2, 3, 4, 5, 6]

# pop([i])
popped_item = my_list.pop()  # [1, 2, 3, 4, 5], popped_item = 6
popped_item = my_list.pop(1)  # [1, 3, 4, 5], popped_item = 2

# clear()
my_list.clear()  # []

# index(x[, start[, end]])
my_list = [1, 2, 3, 2]
index_of_2 = my_list.index(2)  # 1

# count(x)
count_of_2 = my_list.count(2)  # 2

# sort(key=None, reverse=False)
my_list.sort(reverse=True)  # [3, 2, 2, 1]

# reverse()
my_list.reverse()  # [1, 2, 2, 3]

# copy()
copied_list = my_list.copy()  # [1, 2, 2, 3]


